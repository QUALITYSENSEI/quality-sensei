import { useEffect, useState } from 'react';
import { Link, useLocation, useRoute } from 'wouter';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronLeft, BookOpen, Code, PlayCircle, CheckCircle, Info } from 'lucide-react';
import Header from '@/components/layout/Header';
import Footer from '@/components/layout/Footer';
import { Helmet } from 'react-helmet';
import { SiSelenium } from 'react-icons/si';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import Breadcrumbs from '@/components/ui/Breadcrumbs';

// Module interface
interface Module {
  id: string;
  title: string;
  description: string;
}

// Modules available in the Selenium lab
const modules: Module[] = [
  {
    id: 'intro',
    title: 'Introduction to Selenium',
    description: 'Learn the basics of Selenium WebDriver and its architecture.'
  },
  {
    id: 'setup',
    title: 'Setting Up Selenium',
    description: 'Set up Selenium WebDriver with Java and configure your environment.'
  },
  {
    id: 'locators',
    title: 'Element Locators',
    description: 'Master different locator strategies: ID, Name, Class, XPath, and CSS Selectors.'
  },
  {
    id: 'actions',
    title: 'Browser Actions',
    description: 'Learn to interact with web elements: clicks, typing, scrolling, and more.'
  },
  {
    id: 'waits',
    title: 'Synchronization & Waits',
    description: 'Handle timing issues with implicit, explicit, and fluent waits.'
  },
  {
    id: 'advanced',
    title: 'Advanced Interactions',
    description: 'Work with advanced scenarios: alerts, frames, windows, and drag-and-drop.'
  },
  {
    id: 'framework',
    title: 'Building a Framework',
    description: 'Create a modular, maintainable test automation framework.'
  },
  {
    id: 'reporting',
    title: 'Reporting & Logging',
    description: 'Implement comprehensive test reporting and logging mechanisms.'
  }
];

const SeleniumLab = () => {
  // Get the current URL
  const [location] = useLocation();
  const [match, params] = useRoute('/labs/automation/selenium/:moduleId');
  
  // Parse the moduleId from the URL or default to 'intro'
  const moduleId = match ? params.moduleId : 'intro';
  
  // Check if the moduleId is valid, otherwise use 'intro'
  const isValidModule = modules.some(m => m.id === moduleId);
  const [activeModule, setActiveModule] = useState<string>(isValidModule ? moduleId : 'intro');
  const [activeTab, setActiveTab] = useState<string>('learn');

  // Find current module
  const currentModule = modules.find(m => m.id === activeModule) || modules[0];

  // Scroll to top and update module when URL changes
  useEffect(() => {
    window.scrollTo(0, 0);
    // If we have a valid module in URL, update the active module
    if (isValidModule) {
      setActiveModule(moduleId);
    }
  }, [moduleId, isValidModule]);

  // Get SEO title and description based on active module
  const pageTitle = `${currentModule.title} | Selenium WebDriver Lab | Quality Sensei`;
  const pageDescription = `Learn ${currentModule.title.toLowerCase()} in our Selenium WebDriver interactive lab. ${currentModule.description}`;
  const canonicalUrl = `https://qualitysensei.com/labs/automation/selenium/${activeModule}`;

  return (
    <>
      <Helmet>
        <title>{pageTitle}</title>
        <meta name="description" content={pageDescription} />
        <meta property="og:title" content={pageTitle} />
        <meta property="og:description" content={pageDescription} />
        <meta property="og:type" content="website" />
        <meta property="og:url" content={canonicalUrl} />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={pageTitle} />
        <meta name="twitter:description" content={pageDescription} />
        <link rel="canonical" href={canonicalUrl} />
      </Helmet>
      
      <Header />
      
      <main className="pt-32 pb-12">
        <div className="container mx-auto px-4">
          {/* Breadcrumb Navigation */}
          <Breadcrumbs
            items={[
              { label: 'Labs', href: '/labs' },
              { label: 'Automation', href: '/labs/automation' },
              { label: 'Selenium', href: '/labs/automation/selenium' },
              ...(activeModule !== 'intro' ? [{ 
                label: currentModule.title, 
                href: `/labs/automation/selenium/${activeModule}`,
                active: true
              }] : [])
            ]}
          />
          
          <Separator className="mb-6" />
          
          {/* Back link */}
          <Link href="/labs/automation" className="inline-flex items-center text-primary hover:underline mb-8">
            <ChevronLeft className="w-4 h-4 mr-1" />
            Back to Automation Labs
          </Link>
          
          {/* Lab Header */}
          <motion.div 
            className="max-w-3xl mx-auto text-center mb-12"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-green-100 text-green-600 dark:bg-green-900/30 dark:text-green-400 mb-4">
              <SiSelenium className="w-10 h-10" />
            </div>
            <h1 className="text-4xl md:text-5xl font-bold mb-4">Selenium WebDriver Lab</h1>
            <p className="text-xl text-muted-foreground">
              Master web automation with Selenium WebDriver through hands-on practice.
            </p>
          </motion.div>
          
          {/* Lab Interface */}
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-8 max-w-7xl mx-auto">
            {/* Sidebar - Module List */}
            <motion.div
              className="neomorphic-card p-4 lg:col-span-1"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6 }}
            >
              <h2 className="text-xl font-bold mb-4 p-2">Lab Modules</h2>
              <div className="space-y-1">
                {modules.map((module) => (
                  <Link
                    key={module.id}
                    href={`/labs/automation/selenium/${module.id}`}
                    className={`block w-full text-left p-3 rounded-lg transition-colors ${
                      activeModule === module.id 
                        ? 'bg-primary text-primary-foreground' 
                        : 'hover:bg-muted'
                    }`}
                  >
                    {module.title}
                  </Link>
                ))}
              </div>
            </motion.div>
            
            {/* Main Content Area */}
            <motion.div
              className="neomorphic-card p-6 lg:col-span-3"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
            >
              {/* Module Header */}
              <div className="border-b border-border pb-4 mb-6">
                <h2 className="text-2xl font-bold">
                  {modules.find(m => m.id === activeModule)?.title}
                </h2>
                <p className="text-muted-foreground">
                  {modules.find(m => m.id === activeModule)?.description}
                </p>
              </div>
              
              {/* Content Tabs */}
              <Tabs defaultValue="learn" className="w-full" onValueChange={setActiveTab}>
                <TabsList className="grid grid-cols-3 mb-6">
                  <TabsTrigger value="learn" className="flex items-center gap-2">
                    <BookOpen className="w-4 h-4" />
                    <span>Learn</span>
                  </TabsTrigger>
                  <TabsTrigger value="practice" className="flex items-center gap-2">
                    <Code className="w-4 h-4" />
                    <span>Practice</span>
                  </TabsTrigger>
                  <TabsTrigger value="challenge" className="flex items-center gap-2">
                    <PlayCircle className="w-4 h-4" />
                    <span>Challenge</span>
                  </TabsTrigger>
                </TabsList>
                
                <AnimatePresence mode="wait">
                  <motion.div
                    key={activeTab}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    transition={{ duration: 0.2 }}
                  >
                    <TabsContent value="learn" className="mt-0">
                      {/* Learn Content */}
                      <div className="prose prose-lg dark:prose-invert max-w-none">
                        <h3>What is Selenium WebDriver?</h3>
                        <p>
                          Selenium WebDriver is an open-source automation framework that allows you to control web browsers programmatically. It provides a consistent API that works across different browsers and platforms.
                        </p>
                        <h3>Key Features</h3>
                        <ul>
                          <li>Support for multiple programming languages (Java, Python, C#, etc.)</li>
                          <li>Native browser support without external dependencies</li>
                          <li>Rich set of selectors to locate elements</li>
                          <li>Advanced browser interactions and javascript execution</li>
                        </ul>
                        <div className="bg-muted p-4 rounded-lg">
                          <h4 className="flex items-center">
                            <Info className="w-5 h-5 mr-2" />
                            Pro Tip
                          </h4>
                          <p className="text-sm">
                            Always use explicit waits instead of Thread.sleep() for better test stability and performance.
                          </p>
                        </div>
                      </div>
                    </TabsContent>
                    
                    <TabsContent value="practice" className="mt-0">
                      {/* Practice Content */}
                      <div className="space-y-6">
                        <div className="bg-muted p-4 rounded-lg">
                          <h3 className="text-lg font-medium mb-2">Practice Exercise</h3>
                          <p>
                            Create a Selenium script that navigates to a website, finds an element, and interacts with it.
                          </p>
                        </div>
                        
                        <div className="bg-card border border-border rounded-lg">
                          <div className="border-b border-border p-3 flex justify-between items-center">
                            <span className="font-medium">editor.java</span>
                            <div className="space-x-2">
                              <Button variant="outline" size="sm" className="h-8">
                                Reset
                              </Button>
                              <Button size="sm" className="h-8">
                                Run
                              </Button>
                            </div>
                          </div>
                          <div className="p-4 font-mono text-sm bg-muted rounded-b-lg overflow-auto h-64">
                            <pre>{`import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class Main {
    public static void main(String[] args) {
        // TODO: Initialize ChromeDriver
        
        // TODO: Navigate to a website
        
        // TODO: Find an element by ID
        
        // TODO: Interact with the element
        
        // TODO: Close the browser
    }
}`}</pre>
                          </div>
                        </div>
                      </div>
                    </TabsContent>
                    
                    <TabsContent value="challenge" className="mt-0">
                      {/* Challenge Content */}
                      <div className="space-y-6">
                        <div className="bg-muted p-4 rounded-lg">
                          <h3 className="text-lg font-medium mb-2">Challenge Task</h3>
                          <p>
                            Create a complete test that logs into a demo website, verifies login success, and then logs out.
                          </p>
                          <div className="mt-2">
                            <span className="text-sm font-medium">Requirements:</span>
                            <ul className="text-sm mt-1 space-y-1">
                              <li className="flex items-center">
                                <CheckCircle className="w-4 h-4 text-muted-foreground mr-2" />
                                Use Page Object Model design pattern
                              </li>
                              <li className="flex items-center">
                                <CheckCircle className="w-4 h-4 text-muted-foreground mr-2" />
                                Implement explicit waits
                              </li>
                              <li className="flex items-center">
                                <CheckCircle className="w-4 h-4 text-muted-foreground mr-2" />
                                Add assertions to verify login success
                              </li>
                            </ul>
                          </div>
                        </div>
                        
                        <Button className="w-full py-6">
                          Start Challenge
                        </Button>
                      </div>
                    </TabsContent>
                  </motion.div>
                </AnimatePresence>
              </Tabs>
            </motion.div>
          </div>
        </div>
      </main>
      
      <Footer />
    </>
  );
};

export default SeleniumLab;